//Create Database or Schema
CREATE DATABASE IF NOT EXISTS mydb;
CREATE DATABASE IF NOT EXISTS usman;
Use sys;
CREATE DATABASE usman;
DROP DATABASE USMAN;
CREATE SCHEMA USMAN;
DROP SCHEMA USMAN;

//Create Table
USE Usman;
CREATE TABLE Student(
SNO int(5),
SNAME Varchar(15),
Marks int(3));

//Describe the Table
Describe STUDENT;

//Insert Data into Tables

INSERT INTO STUDENT VALUES(101,'USMAN',300);
INSERT INTO STUDENT(SNO,SNAME,Marks) VALUES(102,'AHmed',500);
INSERT INTO STUDENT VALUES(101,'USMAN',NULL);


//Retrieving Data From Table
SELECT * FROM STUDENT;
SELECT SNO FROM STUDENT;
SELECT SNO,Marks FROM STUDENT;

// Selecting Rows from the Table
Select SNO From STUDENT;

//Column ALIAS OR ALIAS
SELECT SNO STUDENTNO from STUDENT

SELECT SNO,Marks+200 FROM STUDENT;
SELECT SNO,Marks+200 FEES FROM STUDENT;

//WHERE CLAUSE
SELECT SNO,SNAME,MARKS FROM STUDENT
WHERE SNO = 101;
SELECT SNO,SNAME,MARKS FROM STUDENT
WHERE MARKS>=300;

// DISTINCT STATEMENT
SELECT * FROM STUDENT;
SELECT DISTINCT * FROM STUDENT;
SELECT DISTINCT SNO FROM STUDENT;

SELECT SNO,SNAME,MARKS FROM STUDENT
where MARKS = 300;

SELECT * FROM STUDENT
WHERE MARKS is NULL;

// LOGICAL OPERATORS

//AND

SELECT * FROM STUDENT
WHERE MARKS>100 AND SNO = 101;

//OR

SELECT * FROM STUDENT
WHERE MARKS>100 OR SNO = 101;

//NOT
SELECT * FROM STUDENT
WHERE NOT SNAME ='USMAN';

// Between and Not Between

Select * From Student
WHERE MARKS>=400 AND MARKS<=500;

Select * From Student
Where MARKS between 400 And 500;

Select * From Student
Where MARKS NOT between 400 And 500;

// IN OR NOT IN
SELECT * FROM STUDENT WHERE MARKS IN(300,400,450);
SELECT * FROM STUDENT WHERE MARKS NOT IN(300,400,450);

// Pattren Matching Operation(Wild Card Characters)
SELECT * FROM STUDENT WHERE SNAME LIKE 'U%'; 
SELECT * FROM STUDENT WHERE SNAME LIKE '%N';
SELECT * FROM STUDENT WHERE SNAME LIKE 'U%N';
SELECT * FROM STUDENT WHERE SNAME LIKE '%S%';
SELECT * FROM STUDENT WHERE SNAME NOT LIKE '%S%';
SELECT * FROM STUDENT WHERE SNAME NOT LIKE 'U%'; 
SELECT * FROM STUDENT WHERE SNAME LIKE '%A_';
SELECT * FROM STUDENT WHERE SNAME LIKE '_S%';
SELECT * FROM STUDENT WHERE SNAME LIKE '_____';
SELECT * FROM STUDENT WHERE SNAME LIKE 'U%N%';

// DDL Commands
// CREATE
CREATE TABLE EMPLOYEE(
EID int(5),
ENAME varchar(15),
SAL int(5)
);
SELECT * FROM EMPLOYEE;
INSERT INTO EMPLOYEE VALUES(1,'USMAN',300);
INSERT INTO EMPLOYEE VALUES(2,'SARDAR ALI',400);
INSERT INTO EMPLOYEE VALUES(3,'ASAD',500);

COMMIT;


//ALTER

// ADD COLUMN
ALTER TABLE STUDENT ADD(GRADE VARCHAR(2));

DESCRIBE STUDENT;

//DROP COLUMN
ALTER TABLE STUDENT DROP COLUMN GRADE;
SELECT * FROM STUDENT;

// MODIFY COLUMN
ALTER TABLE STUDENT MODIFY COLUMN SNAME varchar(17);
ALTER TABLE STUDENT MODIFY COLUMN SNO float(3);
DESCRIBE STUDENT;

// RENAME A COLUMN
ALTER TABLE STUDENT RENAME COLUMN SNAME TO STUNAME;
SELECT * FROM STUDENT;

// UPDATE
use USMAN;
SET SQL_SAFE_UPDATES = 0;
UPDATE STUDENT
SET JOB_ID = '5';
UPDATE STUDENT
SET STUNAME = 'USMAN'
WHERE SNO = 101;
UPDATE STUDENT
SET STUNAME = 'USM',MARKS = '1000'
WHERE SNO = 101;
SELECT * FROM STUDENT;

//DELETE

DELETE FROM EMPLOYEE;
ROLLBACK;
SELECT * FROM EMPLOYEE;

DELETE FROM EMPLOYEE;
COMMIT;
ROLLBACK;
SELECT * FROM EMPLOYEE;

//Truncate
truncate TABLE EMPLOYEE;
SELECT * FROM EMPLOYEE;

//DROP
DROP TABLE EMPLOYEE;

// RENAME A TABLE
USE USMAN;
RENAME TABLE STUDENTS to STUDENT;

// MySQL Built-IN Function

//String Function

//UPPER FUNCTION
SELECT UPPER(STUNAME) FROM STUDENT;

// LOWER FUNCTION
SELECT LOWER(STUNAME) FROM STUDENT;

//LENGHT FUNCTION
SELECT LENGTH(STUNAME) FROM STUDENT;

// PRINT NAMES OF STUDENT WHOSE NAME HAS 10 CHARACTER
SELECT * FROM STUDENT WHERE LENGTH(STUNAME) = 10;

// TRIM FUNCTION
SELECT TRIM (       '       WELCOME       ' );
SELECT TRIM (       '       WELCOME       ' ) FROM STUDENT;
SELECT TRIM(STUNAME) FROM STUDENT;
SELECT TRIM('z' from 'zzloverzzz');

//NSTR FUNCTION
SELECT INSTR('ORACLE','L');
SELECT INSTR(STUNAME,'A') FROM STUDENT;

//SUBSTR/SUBSTRING
SELECT SUBSTR('ORACLE','2','3');
SELECT SUBSTR('ORACLE','3','3');
SELECT SUBSTR('ORACLE','4','3');
SELECT SUBSTRING('ORACLE','2','3');
SELECT SUBSTRING('ORACLE','3','3');
SELECT SUBSTRING('ORACLE','4','3');
SELECT SUBSTR(STUNAME,'2','3') FROM STUDENT;

//CONCAT
SELECT CONCAT('ORACLE','TRAINING');
SELECT CONCAT(SNO,STUNAME) FROM STUDENT;
SELECT CONCAT(SNO,STUNAME)SDATA FROM STUDENT;

// NUMERIC FUNCTION
//ABS 
SELECT ABS(40)ABS;
SELECT ABS(-40)ABS;
SELECT ABS(30.56);
SELECT ABS(MARKS)ABS FROM STUDENT;

//SQRT
SELECT SQRT(25);
SELECT SQRT(MARKS)ABS FROM STUDENT;

//MOD
SELECT MOD(5,2) FROM STUDENT;
SELECT MOD(10,2) FROM STUDENT;
SELECT MOD(MARKS,3) FROM STUDENT;

//TRUNCATE
SELECT TRUNCATE(40.232223,3);
SELECT TRUNCATE(40.232223,2);
SELECT TRUNCATE(40232,-1);
SELECT TRUNCATE(40232223,-2);
SELECT TRUNCATE(29292933202232,-5);
SELECT TRUNCATE(MARKS,'3')MARKS FROM STUDENT;

//POWER
SELECT POWER(5,2);
SELECT POWER(MARKS,2) FROM STUDENT;

//GREATEST
SELECT GREATEST(100,200,300)GREAT;
SELECT GREATEST(MARKS,500)MARKS FROM STUDENT;

//LEAST
SELECT LEAST(100,200,300)LEAST;
SELECT LEAST(MARKS,500)MARKS FROM STUDENT;

// DATE FUNCTION

//CURDATE/CURRENT_DATE
SELECT CURDATE();
SELECT CURRENT_DATE();

//CURTIME/CURRENT_TIME
SELECT CURTIME();
SELECT CURRENT_TIME();

//NOW(DATE AND TIME TOGETHER)
SELECT NOW();

//SYSDATE(RETURN SYSTEM DATE)
SELECT SYSDATE();

//YEAR
SELECT YEAR("2019-05-09");

//MONTH
SELECT MONTH("2020-04-09");

//DAY
SELECT DAY("2020-04-09");

//DISPLAY EMPLOYEES WHO ARE JOINED in 1987
SELECT * FROM EMPLOYEE WHERE YEAR(HIRE_DATE) ="1987"; 

//DISPLAY EMPLOYEES WHO ARE JOINED IN JUNE
SELECT * FROM EMPLOYEE WHERE MONTH(HIRE_MONTH) = "JUNE";
SELECT * FROM EMPLOYEE WHERE MONTH(HIRE_MONTH) = "6";

//DISPLAY EMPLOYEES WHO ARE JOINED IN 14 DATE
SELECT * FROM EMPLOYEE WHERE DATE(HIRE_DATE) = "14";

// AGGREGATE FUNCTION
SELECT * FROM STUDENT;
//SUM
SELECT SUM(MARKS) FROM STUDENT;
//AVG
SELECT AVG(MARKS) FROM STUDENT;
//MIN
SELECT MIN(MARKS) FROM STUDENT;
//MAX
SELECT MAX(MARKS) FROM STUDENT;
//COUNT
SELECT COUNT(*) FROM STUDENT;

//GROUP BY CLAUSE
SELECT SNO,SUM(MARKS)MARK FROM STUDENT GROUP BY SNO;
SELECT SNO,SUM(MARKS) FROM STUDENT GROUP BY SNO;
SELECT SNO,AVG(MARKS) FROM STUDENT GROUP BY SNO;
SELECT SNO,MIN(MARKS) FROM STUDENT GROUP BY SNO;
SELECT SNO,MAX(MARKS) FROM STUDENT GROUP BY SNO;
SELECT SNO,COUNT(MARKS) FROM STUDENT GROUP BY SNO;
SELECT SNO,Job_ID,COUNT(*) FROM STUDENT GROUP BY SNO,Job_ID;

// HAVING
SELECT SNO,COUNT(*),MARKS,JOB_ID FROM STUDENT GROUP BY SNO
HAVING COUNT(MARKS)>=3;

SELECT SNO,SUM(MARKS) FROM STUDENT WHERE SNO = 101 GROUP BY SNO
HAVING SUM(MARKS)>100;

//ORDER BY CLAUSE
USE USMAN;
SELECT * FROM STUDENT ORDER BY STUNAME;
SELECT * FROM STUDENT ORDER BY STUNAME DESC;
SELECT * FROM STUDENT ORDER BY STUNAME ASC;
SELECT SNO,SUM(MARKS) FROM STUDENT WHERE SNO = 101 GROUP BY SNO
HAVING SUM(MARKS)>100 ORDER BY SUM(MARKS) DESC;
ALTER TABLE STUDENT DROP COLUMN JOB_ID;


INSERT INTO STUDENT VALUES(1,'USMAN',300);
INSERT INTO STUDENT VALUES(2,'SARDAR ALI',400);
INSERT INTO STUDENT VALUES(3,'ASAD',500);
SELECT * FROM STUDENT ORDER BY SNO;
ALTER TABLE STUDENT RENAME 

//SET OPERATION

//UNION OR UNION ALL

CREATE TABLE A(SNAME varchar(15),NUM int(5));
INSERT INTO A VALUES("ABC",10);
INSERT INTO A VALUES("XYZ",11);
INSERT INTO A VALUES("PQR",12);
INSERT INTO A VALUES("MNO",10);
COMMIT;
CREATE TABLE B(NUM int(5), GRADE varchar(3));
INSERT INTO B VALUES(12,'A');
INSERT INTO B VALUES(12,'B');
INSERT INTO B VALUES(13,'C');
INSERT INTO B VALUES(15,'B');
COMMIT;
SELECT NUM FROM A UNION SELECT NUM FROM B;
SELECT NUM FROM A UNION ALL SELECT NUM FROM B;
SELECT SNAME FROM A UNION ALL SELECT GRADE FROM B;
SELECT SNAME FROM A UNION SELECT GRADE FROM B;

// Order is also specified or same
SELECT NUM,NUM2 FROM A UNION ALL SELECT NUM,NUM2 FROM B;

// INTERSECT
SELECT NUM FROM A INTERSECT  SELECT NUM FROM B;

//MINUS

SELECT NUM FROM A MINUS  SELECT NUM FROM B;

//Auto Increment

USE USMAN;
CREATE TABLE STUD(
SNO INT(5) primary key AUTO_INCREMENT,
SName varchar(15),
Marks int(5));

ALTER TABLE STUD auto_increment=100;
INSERT INTO STUD(SName,Marks) values('UZAIR',900);
Select * FROM STUD;
delete from STUD where SNO = 3;
Rollback;

// LIMIT 
SELECT * FROM STUD LIMIT 5;
SELECT * FROM STUD LIMIT 2,3;

// VIEWS
//CREATE VIEW
CREATE VIEW EMPLOYEE_V1 AS SELECT SName,Marks from STUD;
SELECT * FROM EMPLOYEE_V1;

// DROP VIEW
DROP VIEW EMPLOYEE_V1;


//CREATE INDEX
SELECT * FROM STUD;
CREATE INDEX Idx_employees ON STUD(SNO);
SELECT * FROM STUD;

// DROP INDEX
DROP INDEX Idx_employees ON STUD;

// JOINS

USE USMAN;
CREATE TABLE TAB1(NUMID int(3));
CREATE TABLE TAB2(NUMID int(3));

INSERT INTO TAB1 Values(10);
INSERT INTO TAB1 Values(11);
INSERT INTO TAB1 Values(12);
INSERT INTO TAB1 Values(14);

INSERT INTO TAB2 values(11);
INSERT INTO TAB2 values(12);
INSERT INTO TAB2 values(13);
INSERT INTO TAB2 values(15);

Select * from TAB1;
Select * From TAB2;

//INNER JOIN
Select * From TAB1
INNER JOIN TAB2
on TAB1.NUMID = TAB2.NUMID

//LEFT OUTER JOIN
SELECT * FROM TAB1
LEFT OUTER JOIN TAB2
ON TAB1.NUMID = TAB2.NUMID;

//RIGHT OUTER JOIN
SELECT * FROM TAB1 t1
RIGHT OUTER JOIN TAB2 t2
ON t1.NUMID = t2.NUMID;

SELECT * FROM TAB1 t1
RIGHT OUTER JOIN TAB2 t2
ON t1.NUMID <> t2.NUMID;

//FULL OUTER JOIN
SELECT * FROM TAB1 t1
FULL OUTER JOIN TAB2 t2
ON t1.NUMID = t2.NUMID;

SELECT * FROM TAB1 t1
FULL OUTER JOIN TAB2 t2
ON t1.NUMID <> t2.NUMID;


// SELF JOIN
CREATE TABLE EMP(
EMPLOYEE_ID int(3),
MANAGER_ID int(3),
FIRSTNAME varchar(12)
);
INSERT INTO EMP VALUES(101,1,"USMAN");
INSERT INTO EMP VALUES(102,101,"AHMED");
INSERT INTO EMP(EMPLOYEE_ID,MANAGER_ID,FIRSTNAME) VALUES(104,199,"AMMAR");

SELECT * FROM EMP;
SELECT E.EMPLOYEE_ID,M.MANAGER_ID,E.FIRSTNAME FROM EMP E,EMP M where E.EMPLOYEE_ID = M.MANAGER_ID;

//SUB QUERY/SUBQUERIES
USE USMAN;
ALTER TABLE EMP ADD (DEPARTMENT_ID int(6));
SET SQL_SAFE_UPDATES = 0;
UPDATE emp
SET DEPARTMENT_ID = 10
where EMP.EMPLOYEE_ID = 103;

DISPLAY EMPLOYEES WHOSE SALARY IS LESS THAN USMAN SALARY

SELECT SAL FROM EMP WHERE FIRSTNAME = "USMAN";
SELECT SAL FROM EMP WHERE SAL < 31000;
--SUBQUERY
SELECT SAL FROM EMP WHERE SAL<(SELECT SAL FROM EMP WHERE FIRSTNAME = "USMAN");

--2nd MAX SALARY OF EMPLOYEE
SELECT MAX(SAL) FROM EMP WHERE SAL<(SELECT MAX(SAL) FROM EMP); 
SELECT SAL FROM EMP WHERE SAL<(SELECT MAX(SAL) FROM EMP); 

--3rd MAX SALARY oF EMPLOYEE
SELECT MAX(SAL) thirdMAX FROM EMP WHERE SAL<(SELECT MAX(SAL) FROM EMP WHERE SAL<(SELECT MAX(SAL) FROM EMP));

//SINGLE ROW SUB QUERIES

//FIND THE SALARY OF EMPLOYEES WHOSE SALARY IS GREATER THAN THE SALARY OF EMPLOYEES WHOSE EMPLOYEE_ID = 150
SELECT SAL FROM EMP WHERE SAL>(SELECT SAL FROM EMP WHERE EMPLOYEE_ID =101);

// DISPLAY THE EMPLOYEES WHO ALL EARNING THE HIGHEST SALARY
SELECT * FROM EMP WHERE SAL = (SELECT MAX(SAL) FROM EMP );


//MULTI ROW SUB QUERIES
//DISPLAY EMPLOYEES WHOSE SALARY IS EQUAL TO THE SALARY OF THE ATLEAST ONE EMPLOYEE IN DEPARTMENT_ID = 10

SELECT * FROM EMP WHERE SAL IN (SELECT SAL FROM EMP WHERE DEPARTMENT_ID = 10)
SELECT * FROM EMP WHERE SAL >ALL (SELECT SAL FROM EMP WHERE DEPARTMENT_ID = 10)

--QUERY TO GET DEPARTMENT NAME OF THE EMPLOYEE

SELECT FIRSTNAME,EMPLOYEE_ID,DEPARTMENT_ID,(SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE EMPLOYEES.DEPARTMENT_ID=DEPARTMENT.DEPARTMENT_ID)DNAME FROM EMP;


//LIST OUT THE EMPLOYEES who are having salary less than the MAXIMUM SALARY and ALSO HAVING hire date greater than the Hire Date of an employees who is having maximum salary
SELECT EMPLOYEE_ID,FIRSTNAME,SALARY,HIRE_DATE, FROM EMP WHERE SALARY <
(SELECT MAX(SALARY) FROM EMP AND HIRE_DATE>
(SELECT HIRE_DATE FROM EMP WHERE SAL=
(SELECT MAX(SALARY) FROM EMP));

//TCL

//COMMIT
USE USMAN;
SET autocommit =1;
CREATE TABLE C(SNAME varchar(15),NUM int(5));
INSERT INTO C VALUES("ABC",10);
INSERT INTO C VALUES("XYZ",11);
INSERT INTO C VALUES("PQR",12);
INSERT INTO C VALUES("MNO",10);
COMMIT;

//ROLLBACK
SET autocommit =0;
delete from B;
SELECT * FROM B;
Rollback;

// Integrity Constraints
// NOT NULL
CREATE TABLE STUDENT1(
sno int(3) NOT NULL,
SNAME varchar(14),
marks int(3)
);
INSERT INTO STUDENT1 VALUES(101,'USMAN',101);
INSERT INTO STUDENT1 VALUES(NULL,'USMAN',101);
DROP TABLE STUDENT1;

// UNIQUE
//COLUMN LEVEL
CREATE TABLE STUDENT1(
sno int(3) UNIQUE,
SNAME varchar(14),
marks int(3)
);
CREATE TABLE STUDENT1(
sno int(3) UNIQUE,
SNAME varchar(14) UNIQUE,
marks int(3) UNIQUE
);
INSERT INTO STUDENT1 VALUES(101,'USMAN',101);
INSERT INTO STUDENT1 VALUES(NULL,'USMAN',101);
SELECT * FROM STUDENT1;
DROP TABLE STUDENT1;

//TABLE LEVEL
CREATE TABLE STUDENT1(
sno int(3),
SNAME varchar(14),
marks int(3),
unique(sno));

CREATE TABLE STUDENT1(
sno int(3),
SNAME varchar(14),
marks int(3),
unique(sno,SNAME,MARKS));
INSERT INTO STUDENT1 VALUES(101,'USMAN',101);
INSERT INTO STUDENT1 VALUES(NULL,'USMAN',101);
DROP TABLE STUDENT1;

// PRIMARY KEY
CREATE TABLE STUDENT2(
sno int(3) NOT NULL UNIQUE,
SNAME varchar(14),
marks int(3));


CREATE TABLE STUDENT3(
sno int(3) PRIMARY KEY,
SNAME varchar(14),
marks int(3));

//Composite Key
USE USMAN;
CREATE TABLE STUDENT4(
sno int(3) PRIMARY KEY,
SNAME varchar(14) PRIMARY KEY,
marks int(3));

CREATE TABLE STUDENT5(
sno int(3),
SNAME varchar(14),
marks int(3),
Primary Key(sno,SNAME));

INSERT INTO STUDENT5 VALUES(101,'USMAN',50);
INSERT INTO STUDENT5 VALUES(101,'USMAN',50);
INSERT INTO STUDENT5 VALUES(null,'USMAN',50);


// FOREIGN KEY

//PARENT OR REFERENCED TABLE
CREATE TABLE SCHOOL(
sno int(3),
sname varchar(15),
marks int(3),
primary key (sno));

INSERT INTO SCHOOL VALUES(101,'ahmed',90);
INSERT INTO SCHOOL VALUES(102,'ahsan',80);
INSERT INTO SCHOOL VALUES(103,'rajpoot',70);
SELECT * FROM SCHOOL;

//CHILD TABLE
CREATE TABLE LIBRARY(
sno int(3),
FOREIGN KEY (sno) REFERENCES SCHOOL(sno),
BookName varchar(10)
);
INSERT INTO LIBRARY VALUES(102,'JAVA');
INSERT INTO LIBRARY VALUES(108,'c'); // NOT VALID
INSERT INTO LIBRARY VALUES(null,'dot net');
SELECT * FROM LIBRARY;
delete from school where sno = 102;
delete from library where sno = 102;

//ON DELETE CASCADE

// PARENT TABLE
CREATE TABLE SCHOOL(
sno int(3),
sname varchar(15),
marks int(3),
primary key (sno));

INSERT INTO SCHOOL VALUES(101,'ahmed',90);
INSERT INTO SCHOOL VALUES(102,'ahsan',80);
INSERT INTO SCHOOL VALUES(103,'rajpoot',70);
SELECT * FROM SCHOOL;

//CHILD TABLE
CREATE TABLE LIBRARY(
sno int(3),
FOREIGN KEY (sno) REFERENCES SCHOOL(sno) ON DELETE CASCADE,
BookName varchar(10)
);
INSERT INTO LIBRARY VALUES(102,'JAVA');
INSERT INTO LIBRARY VALUES(108,'c'); // NOT VALID
INSERT INTO LIBRARY VALUES(101,'dot net');
SELECT * FROM LIBRARY;
delete from school where sno = 102;
delete from library where sno = 102;

// FOREIGN KEY Constraint at table level

//PARENT OR REFERENCED TABLE
CREATE TABLE SCHOOL(
sno int(3),
sname varchar(15),
marks int(3),
primary key (sno));

INSERT INTO SCHOOL VALUES(101,'ahmed',90);
INSERT INTO SCHOOL VALUES(102,'ahsan',80);
INSERT INTO SCHOOL VALUES(103,'rajpoot',70);
SELECT * FROM SCHOOL;

//CHILD TABLE
CREATE TABLE LIBRARY(
sno int(3),
FOREIGN KEY (sno) REFERENCES SCHOOL(sno) ON DELETE CASCADE,
BookName varchar(10)
);
INSERT INTO LIBRARY VALUES(102,'JAVA');
INSERT INTO LIBRARY VALUES(108,'c'); // NOT VALID
INSERT INTO LIBRARY VALUES(null,'dot net');
SELECT * FROM LIBRARY;
delete from school where sno = 102;
delete from library where sno = 102;


//CHECK CONSTRAINT
CREATE TABLE X(
sno int(5),
sname varchar(15),
marks int(5) check(marks between 50 and 100));
INSERT INTO X VALUES(101,'amith',40);
INSERT INTO X VALUES(101,'amith',90);
INSERT INTO X VALUES(101,'amith',100);
INSERT INTO X VALUES(101,'amith',140);

CREATE TABLE LOC
(
City varchar(10) check (city in('Lahore','CHENNAI','Mumbai')),
country varchar(15),
pin int(8)
);
INSERT INTO LOC values('HYDERABAD','INDIA',1234566);
INSERT INTO LOC values('Lahore','INDIA',1234566);
INSERT INTO LOC values('Mumbai','INDIA',1234566);
SELECT * FROM LOC;

// DEFAULT CONSTRAINT
CREATE TABLE Orders(
ID int(5),
OrderNumber int(5),
OrderDate datetime DEFAULT now()
);
INSERT INTO Orders(ID,OrderNumber) Values(101,2454);
INSERT INTO Orders(ID,OrderNumber) Values(102,24354);
INSERT INTO Orders Values(102,24354,'2019-05-21 15:25:10');

SELECT * FROM ORDERS;
SELECT now();